def euclidean_normalization(spectrum):
    euclidean_length = np.linalg.norm(spectrum)
    return spectrum / euclidean_length

# Apply Euclidean normalization to each spectrum
normalized_spectral_data = np.apply_along_axis(euclidean_normalization, axis=1, arr=baseline_corrected_spectral_data)

# Cut intensities between wavenumbers 1850 and 2300
cut_wavelengths_indices = (wavelengths >= 1850) & (wavelengths <= 2500)
normalized_spectral_data[:, cut_wavelengths_indices] = 0

# Plotting all baseline-corrected and normalized spectra
num_spectra = len(normalized_spectral_data)

plt.figure(figsize=(10, 6))
for i in range(num_spectra):
    plt.plot(wavelengths, normalized_spectral_data[i])

plt.title('All Spectra (Baseline Corrected, Normalized, and Cut between 1850-2500) - CAPILAR')
plt.xlabel('Wavelength')
plt.ylabel('Intensity')
plt.legend()
plt.xlim((wavelengths.min(), wavelengths.max()))  # Set x-axis limits to include all data
plt.show()

print(f"Number of spectra plotted: {num_spectra}")